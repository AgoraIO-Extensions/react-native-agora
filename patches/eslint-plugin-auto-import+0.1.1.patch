diff --git a/node_modules/eslint-plugin-auto-import/lib/index.js b/node_modules/eslint-plugin-auto-import/lib/index.js
index 86334aa..4dd0ce8 100644
--- a/node_modules/eslint-plugin-auto-import/lib/index.js
+++ b/node_modules/eslint-plugin-auto-import/lib/index.js
@@ -10,7 +10,7 @@
 
 var requireIndex = require("requireindex");
 var autoImportRule = require('./rules/auto-import')
-var autoConstRule = require('./rules/auto-const')
+// var autoConstRule = require('./rules/auto-const')
 
 //------------------------------------------------------------------------------
 // Plugin Definition
@@ -18,7 +18,7 @@ var autoConstRule = require('./rules/auto-const')
 
 module.exports = {
   rules: {
-    'auto-import': autoImportRule.create,
-    'auto-const': autoConstRule
+    'auto-import': autoImportRule,
+    // 'auto-const': autoConstRule
   }
 }
\ No newline at end of file
diff --git a/node_modules/eslint-plugin-auto-import/lib/rules/auto-const.js b/node_modules/eslint-plugin-auto-import/lib/rules/auto-const.js
deleted file mode 100644
index 307bae3..0000000
--- a/node_modules/eslint-plugin-auto-import/lib/rules/auto-const.js
+++ /dev/null
@@ -1,22 +0,0 @@
-var preferConst = require('eslint/lib/rules/prefer-const')
-
-module.exports = function(context) {
-  var originalReport = context.report
-  return preferConst(Object.create(context, {
-    report: {
-      value: function(report) {
-        var variableDeclarator = report.node.parent
-        var variableDeclaration = variableDeclarator.parent
-        if (variableDeclaration.declarations && variableDeclaration.declarations.length === 1) {
-          report.fix = function(fixer) {
-            var startOfLet = variableDeclaration.range[0]
-            return fixer.replaceTextRange([startOfLet, startOfLet + 3], 'const')
-          }
-        } else {
-          report.message += ' This can\'t be fixed'
-        }
-        originalReport.call(context, report)
-      }
-    }
-  }))
-}
\ No newline at end of file
diff --git a/node_modules/eslint-plugin-auto-import/lib/rules/auto-import.js b/node_modules/eslint-plugin-auto-import/lib/rules/auto-import.js
index 4b4bb22..acf0749 100644
--- a/node_modules/eslint-plugin-auto-import/lib/rules/auto-import.js
+++ b/node_modules/eslint-plugin-auto-import/lib/rules/auto-import.js
@@ -13,20 +13,20 @@ var fs = require('fs')
 // Rule Definition
 //------------------------------------------------------------------------------
 
+var sourceFileMap = []
+
 function getSourceFile(sourceCode) {
   const codeProject = new tsMorph.Project({ useInMemoryFileSystem: true });
 
   return codeProject.createSourceFile('main.tsx', sourceCode);
 }
 
-
 function isDefaultlyExported(path) {
-  const sourceCode = fs.readFileSync(path, {encoding: 'utf8'})
-
-  const sourceFile = getSourceFile(sourceCode)
-
-  
-  return sourceFile.getClasses().find(c => c.isDefaultExport()) !== undefined
+  if (sourceFileMap[path] === undefined) {
+    const sourceCode = fs.readFileSync(path, { encoding: 'utf8' })
+    sourceFileMap[path] = getSourceFile(sourceCode)
+  }
+  return sourceFileMap[path].getClasses().find(c => c.isDefaultExport()) !== undefined
 }
 
 function isStaticRequire(node) {
@@ -38,44 +38,66 @@ function isStaticRequire(node) {
     node.arguments[0].type === 'Literal' &&
     typeof node.arguments[0].value === 'string'
 }
+
 /**
  * Checks if the given node is the argument of a typeof operator.
  * @param {ASTNode} node The AST node being checked.
  * @returns {boolean} Whether or not the node is the argument of a typeof operator.
  */
 function hasTypeOfOperator(node) {
-    var parent = node.parent;
+  var parent = node.parent;
 
-    return parent.type === "UnaryExpression" && parent.operator === "typeof";
+  return parent.type === "UnaryExpression" && parent.operator === "typeof";
 }
 
-function searchDirectory(path, name, except) {
-    var files = fs.readdirSync(path)
-    var directories = []
-    for (var i = 0, l = files.length; i < l; i++) {
-        var file = files[i]
-        var basename = file.replace(/\..*/, '')
-        if (basename) { // ignore .name directories
-            var filePath = pathModule.join(path, file)
-            if (basename === name) {
+var cacheMap = []
+
+function searchDirectory(path, name, except, isNotDefaultExport) {
+  if (cacheMap[path + name] !== undefined) {
+    return cacheMap[path + name]
+  }
+
+  var files = fs.readdirSync(path)
+  var directories = []
+  for (var i = 0, l = files.length; i < l; i++) {
+    var file = files[i]
+    var basename = file.replace(/\..*/, '')
+    if (basename) { // ignore .name directories
+      var filePath = pathModule.join(path, file)
+      if (!isNotDefaultExport) {
+        if (basename === name) {
+          return basename
+        }
+      }
+      if (file !== except) {
+        var stats = fs.statSync(filePath)
+        if (stats.isDirectory()) {
+          directories.push(file)
+        } else if (stats.isFile()) {
+          if (isNotDefaultExport) {
+            if (filePath.endsWith('.ts')) {
+              if (sourceFileMap[filePath] === undefined) {
+                const sourceCode = fs.readFileSync(filePath, { encoding: 'utf8' })
+                sourceFileMap[filePath] = getSourceFile(sourceCode)
+              }
+              if (sourceFileMap[filePath].getExportSymbols().find(c => c.getName() === name) !== undefined) {
+                cacheMap[path + name] = basename
                 return basename
+              }
             }
-            if (file !== except) {
-                var stats = fs.statSync(filePath)
-                if (stats.isDirectory()) {
-                    directories.push(file)
-                }
-            }
+          }
         }
+      }
     }
+  }
 
-    for (var i = 0, l = directories.length; i < l; i++) {
-        var directory = directories[i]
-        var foundModule = searchDirectory(pathModule.join(path, directory), name)
-        if (foundModule) {
-            return directory + '/' + foundModule
-        }
+  for (var i = 0, l = directories.length; i < l; i++) {
+    var directory = directories[i]
+    var foundModule = searchDirectory(pathModule.join(path, directory), name)
+    if (foundModule) {
+      return directory + '/' + foundModule
     }
+  }
 }
 
 //------------------------------------------------------------------------------
@@ -83,148 +105,146 @@ function searchDirectory(path, name, except) {
 //------------------------------------------------------------------------------
 
 module.exports = {
-    meta: {
-        docs: {
-            description: "Auto import",
-            category: "Variables",
-            recommended: true
+  meta: {
+    docs: {
+      description: "Auto import",
+      category: "Variables",
+      recommended: true
+    },
+    fixable: "code",
+    schema: [
+      {
+        type: "object",
+        properties: {
+          typeof: {
+            type: "boolean"
+          }
         },
-
-        schema: [
-            {
-                type: "object",
-                properties: {
-                    typeof: {
-                        type: "boolean"
+        additionalProperties: true
+      }
+    ]
+  },
+
+  create: function (context) {
+    var options = context.options[0];
+    var considerTypeOf = options && options.typeof === true || false;
+    const dependencies = new Set() // keep track of dependencies
+    let lastNode // keep track of the last node to report on
+
+    return {
+      ImportDeclaration(node) {
+        dependencies.add(node.source.value)
+        lastNode = node.source
+      },
+
+      MemberExpression: function (node) {
+
+      },
+
+      CallExpression(node) {
+        if (isStaticRequire(node)) {
+          const [requirePath] = node.arguments
+          dependencies.add(requirePath.value)
+          lastNode = node
+        }
+      },
+      "Program:exit": function (/* node */) {
+        var globalScope = context.getScope()
+        var options = context.options[0]
+        var fixed = {}
+        globalScope.through.forEach(function (ref) {
+          var identifier = ref.identifier;
+
+          if (!considerTypeOf && hasTypeOfOperator(identifier)) {
+            return;
+          }
+          var undefinedIndentifier = identifier.name
+          context.report({
+            node: identifier,
+            message: '{{name}} is not defined.',
+            data: identifier,
+            fix: function (fixer) {
+              if (fixed[undefinedIndentifier]) {
+                return
+              }
+              if (identifier.parent.type === 'AssignmentExpression') {
+                return fixer.insertTextBefore(identifier, 'let ')
+              }
+              fixed[undefinedIndentifier] = true
+              var filename = context.getFilename()
+              var path = pathModule.dirname(filename)
+              var lastPath
+              var foundModule
+              var isNotDefaultExport = true
+              var parentPrefix = ''
+              // go up the current directory tree
+              var rootPath = pathModule.resolve(__dirname, '../../../..', options.rootPath)
+              while (!foundModule && path.indexOf(rootPath) === 0) {
+                foundModule = searchDirectory(path, undefinedIndentifier, lastPath, isNotDefaultExport)
+                if (foundModule) {
+                  foundModule = (parentPrefix || './') + foundModule
+                  break
+                } else {
+                  lastPath = path
+                  path = pathModule.dirname(path)
+                  parentPrefix = parentPrefix + '../'
+                }
+              }
+              if (!foundModule && options.packages) {
+                // next search configured packages
+                for (var packageName in options.packages) {
+                  var pckg = options.packages[packageName]
+                  var packageRef = pckg.as || (typeof pckg === 'string' ? pckg : packageName)
+                  if (packageRef === undefinedIndentifier) {
+                    foundModule = packageName
+                  } else if (pckg.hasExports && require(pckg.hasExports[0] === '.' ?
+                    pathModule.resolve(__dirname, '../../../..', pckg.hasExports) :
+                    pckg.hasExports)[undefinedIndentifier]) {
+                    isNotDefaultExport = true
+                    foundModule = packageName
+                  } else if (pckg.modulesIn) {
+                    foundModule = searchDirectory(pathModule.resolve(__dirname, '../../../..', pckg.modulesIn), undefinedIndentifier, false)
+                    if (foundModule) {
+                      foundModule = packageName + '/' + foundModule
                     }
-                },
-                additionalProperties: false
-            }
-        ]
-    },
-
-    create: function(context) {
-        var options = context.options[0];
-        var considerTypeOf = options && options.typeof === true || false;
-      const dependencies = new Set() // keep track of dependencies
-      let lastNode // keep track of the last node to report on
-
-        return {
-          ImportDeclaration(node) {
-            dependencies.add(node.source.value)
-            lastNode = node.source
-          },
+                  }
+                  if (foundModule) {
+                    break
+                  }
+                }
+              }
+
+              if (foundModule) {
+                var i = 0
+                var importDeclaration, node
+                while ((node = globalScope.block.body[i++]).type === 'ImportDeclaration') {
+                  importDeclaration = node
+                  if (node.source.value === foundModule) {
+                    if (isNotDefaultExport) {
+                      // add to the named imports of an existing import declaration
+                      return fixer.insertTextAfter(node.specifiers[node.specifiers.length - 1], ', ' + undefinedIndentifier)
+                    } else {
+                      console.log(foundModule, 'already imported')
+                      return
+                    }
+                  }
+                }
 
-          MemberExpression: function (node) {
+                isNotDefaultExport = !isDefaultlyExported(pathModule.resolve(pathModule.dirname(filename), foundModule + '.ts'))
 
-          },
+                var importStatement = (isNotDefaultExport ?
+                  'import { ' + undefinedIndentifier + ' }' :
+                  'import ' + undefinedIndentifier) + " from '" + foundModule + "';\n"
 
-          CallExpression(node) {
-            if (isStaticRequire(node)) {
-              const [ requirePath ] = node.arguments
-              dependencies.add(requirePath.value)
-              lastNode = node
-            }
-          },
-            "Program:exit": function(/* node */) {
-                var globalScope = context.getScope()
-                var options = context.options[0]
-//                console.log(context.eslint)
-                var fixed = {}
-//                console.log(globalScope.block.body[0].specifiers[0])
-                globalScope.through.forEach(function(ref) {
-                    var identifier = ref.identifier;
-
-                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {
-                        return;
-                    }
-                    var undefinedIndentifier = identifier.name
-                    context.report({
-                        node: identifier,
-                        message: '{{name}} is not defined.',
-                        data: identifier,
-                        fix: function(fixer) {
-                            if (fixed[undefinedIndentifier]) {
-                                return
-                            }
-                            if (identifier.parent.type === 'AssignmentExpression') {
-                                return fixer.insertTextBefore(identifier, 'let ')
-                            }
-                            fixed[undefinedIndentifier] = true
-                            console.log('running auto-import');
-                            var filename = context.getFilename()
-                            var path = pathModule.dirname(filename)
-                            var lastPath
-                            var foundModule
-                            var isNotDefaultExport
-                            var parentPrefix = ''
-                            // go up the current directory tree
-                            var rootPath = pathModule.resolve(__dirname, '../../../..', options.rootPath)
-                            while (!foundModule && path.indexOf(rootPath) === 0) {
-                                foundModule = searchDirectory(path, undefinedIndentifier, lastPath)
-                                if (foundModule) {
-                                    foundModule = (parentPrefix || './') + foundModule
-                                } else {
-                                    lastPath = path
-                                    path = pathModule.dirname(path)
-                                    parentPrefix = parentPrefix + '../'
-                                }
-                            }
-                            if (!foundModule && options.packages) {
-                                // next search configured packages
-                                for (var packageName in options.packages) {
-                                    var pckg = options.packages[packageName]
-                                    var packageRef = pckg.as || (typeof pckg === 'string' ? pckg : packageName)
-                                    if (packageRef === undefinedIndentifier) {
-                                        foundModule = packageName
-                                    } else if (pckg.hasExports && require(pckg.hasExports[0] === '.' ?
-                                            pathModule.resolve(__dirname, '../../../..', pckg.hasExports) :
-                                            pckg.hasExports)[undefinedIndentifier]) {
-                                        isNotDefaultExport = true
-                                        foundModule = packageName
-                                    } else if (pckg.modulesIn) {
-                                        foundModule = searchDirectory(pathModule.resolve(__dirname, '../../../..', pckg.modulesIn), undefinedIndentifier)
-                                        if (foundModule) {
-                                            foundModule = packageName + '/' + foundModule
-                                        }
-                                    }
-                                    if (foundModule) {
-                                        break
-                                    }
-                                }
-                            }
-
-                            if (foundModule) {
-                                var i = 0
-                                var importDeclaration, node
-                                while ((node = globalScope.block.body[i++]).type === 'ImportDeclaration') {
-                                    importDeclaration = node
-                                    if (node.source.value === foundModule) {
-                                        if (isNotDefaultExport) {
-                                            // add to the named imports of an existing import declaration
-                                            return fixer.insertTextAfter(node.specifiers[node.specifiers.length - 1], ', ' + undefinedIndentifier)
-                                        } else {
-                                            console.log(foundModule, 'already imported')
-                                            return
-                                        }
-                                    }
-                                }
-
-                                isNotDefaultExport = !isDefaultlyExported(pathModule.dirname(filename) + foundModule.replace('./', '/') + '.ts')
-
-                                var importStatement = (isNotDefaultExport ?
-                                    'import { ' + undefinedIndentifier + ' }' :
-                                    'import ' + undefinedIndentifier) + " from '" + foundModule + "'"
-
-                                if (importDeclaration) {
-                                    return fixer.insertTextAfter(importDeclaration, '\n' + importStatement)
-                                }
-                                return fixer.insertTextAfterRange([0, 0], importStatement + (dependencies.size === 0 ? '\n\n' : ''))
-                            }
-                        }
-                    });
-                });
+                if (importDeclaration) {
+                  return fixer.insertTextAfter(importDeclaration, '\n' + importStatement)
+                }
+                return fixer.insertTextAfterRange([0, 0], importStatement + (dependencies.size === 0 ? '\n\n' : ''))
+              }
             }
-        };
-    }
+          });
+        });
+      }
+    };
+  }
 };
